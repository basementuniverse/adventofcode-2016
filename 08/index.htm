<!DOCTYPE html>
<html>
<head>
<script>

var tinyCodeDisplayingScreen = {};	// will soon dominate the tiny-code-displaying-screen market
window.addEventListener("load", function() {
	var WIDTH = 50,
		HEIGHT = 6,
		PIXEL = 10;
	
	var canvas = document.querySelector("canvas"),
		context = canvas.getContext("2d"),
		pixels = initPixels(),
		instructions = document.querySelector("pre").innerText.split("\n").map(tokenize),
		wrap = function(i, n) {
			if (i < 0) {
				return n - (Math.abs(i + 1) % n) - 1;
			}
			return i % n;
		},
		operations = {	// operations that can be performed on the screen pixels
			rect: function(width, height) {
				for (var y = 0; y < height; y++) {
					for (var x = 0; x < width; x++) {
						pixels[y][x] = 1;
					}
				}
			},
			rotateRow: function(y, n) {
				var newRow = [];
				for (var x = 0; x < WIDTH; x++) {
					newRow[x] = pixels[y][wrap(x - n, WIDTH)];
				}
				pixels[y] = newRow;
			},
			rotateColumn: function(x, n) {
				var newCol = [];
				for (var y = 0; y < HEIGHT; y++) {
					newCol[y] = pixels[wrap(y - n, HEIGHT)][x];
				}
				for (var y = 0; y < HEIGHT; y++) {
					pixels[y][x] = newCol[y];
				}
			}
		};
	canvas.width = 500;
	canvas.height = 60;
	
	function initPixels() {
		var p = [];
		for (var y = 0; y < HEIGHT; y++) {
			let row = [];
			for (var x = 0; x < WIDTH; x++) {
				row.push(0);
			}
			p.push(row);
		}
		return p;
	}
	
	function tokenize(i) {
		var parts = i.split(/ |x=|y=|x/),
			instruction = "",
			parameterA = 0,
			parameterB = 0;
		if (i.startsWith("rect")) {
			instruction = "rect";
			parameterA = parseInt(parts[1]);
			parameterB = parseInt(parts[2]);
		} else if (i.startsWith("rotate row")) {
			instruction = "rotateRow";
			parameterA = parseInt(parts[3]);
			parameterB = parseInt(parts[5]);
		} else if (i.startsWith("rotate column")) {
			instruction = "rotateColumn";
			parameterA = parseInt(parts[3]);
			parameterB = parseInt(parts[5]);
		}
		return { instruction: instruction, a: parameterA, b: parameterB };
	}
	
	function draw() {
		context.save();
		context.clearRect(0, 0, 500, 60);
		context.fillStyle = "#0f0";
		var activePixels = 0;
		for (var y = 0; y < HEIGHT; y++) {
			for (var x = 0; x < WIDTH; x++) {
				if (pixels[y][x]) {
					context.fillRect(x * PIXEL, y * PIXEL, PIXEL, PIXEL);
					activePixels++;
				}
			}
		}
		context.restore();
		return activePixels;
	}
	
	// animate the screen
	var ip = 0,
		frameTime = 10,	// time per frame, ms
		timeout = null,
		update = function() {
			var i = instructions[ip];
			if (!operations[i.instruction]) {
				debugger;
			}
			operations[i.instruction](i.a, i.b);
			var activePixels = draw();
			if (ip < instructions.length - 1) {
				ip++;
				timeout = setTimeout(update, frameTime);
			} else {
				console.log("Done! Active pixels: %i", activePixels);
			}
		};
	tinyCodeDisplayingScreen.go = function() {
		window.clearTimeout(timeout);
		pixels = initPixels();
		ip = 0;
		update();
	};
}, false);

</script>
<style>

canvas {
	display: block;
	margin: 20px;
	width: 500px;
	height: 60px;
	background-color: black;
}

</style>
</head>
<body>
<canvas></canvas>
<a href="javascript:tinyCodeDisplayingScreen.go()">Go</a>
<pre>rect 1x1
rotate row y=0 by 5
rect 1x1
rotate row y=0 by 6
rect 1x1
rotate row y=0 by 5
rect 1x1
rotate row y=0 by 2
rect 1x1
rotate row y=0 by 5
rect 2x1
rotate row y=0 by 2
rect 1x1
rotate row y=0 by 4
rect 1x1
rotate row y=0 by 3
rect 2x1
rotate row y=0 by 7
rect 3x1
rotate row y=0 by 3
rect 1x1
rotate row y=0 by 3
rect 1x2
rotate row y=1 by 13
rotate column x=0 by 1
rect 2x1
rotate row y=0 by 5
rotate column x=0 by 1
rect 3x1
rotate row y=0 by 18
rotate column x=13 by 1
rotate column x=7 by 2
rotate column x=2 by 3
rotate column x=0 by 1
rect 17x1
rotate row y=3 by 13
rotate row y=1 by 37
rotate row y=0 by 11
rotate column x=7 by 1
rotate column x=6 by 1
rotate column x=4 by 1
rotate column x=0 by 1
rect 10x1
rotate row y=2 by 37
rotate column x=19 by 2
rotate column x=9 by 2
rotate row y=3 by 5
rotate row y=2 by 1
rotate row y=1 by 4
rotate row y=0 by 4
rect 1x4
rotate column x=25 by 3
rotate row y=3 by 5
rotate row y=2 by 2
rotate row y=1 by 1
rotate row y=0 by 1
rect 1x5
rotate row y=2 by 10
rotate column x=39 by 1
rotate column x=35 by 1
rotate column x=29 by 1
rotate column x=19 by 1
rotate column x=7 by 2
rotate row y=4 by 22
rotate row y=3 by 5
rotate row y=1 by 21
rotate row y=0 by 10
rotate column x=2 by 2
rotate column x=0 by 2
rect 4x2
rotate column x=46 by 2
rotate column x=44 by 2
rotate column x=42 by 1
rotate column x=41 by 1
rotate column x=40 by 2
rotate column x=38 by 2
rotate column x=37 by 3
rotate column x=35 by 1
rotate column x=33 by 2
rotate column x=32 by 1
rotate column x=31 by 2
rotate column x=30 by 1
rotate column x=28 by 1
rotate column x=27 by 3
rotate column x=26 by 1
rotate column x=23 by 2
rotate column x=22 by 1
rotate column x=21 by 1
rotate column x=20 by 1
rotate column x=19 by 1
rotate column x=18 by 2
rotate column x=16 by 2
rotate column x=15 by 1
rotate column x=13 by 1
rotate column x=12 by 1
rotate column x=11 by 1
rotate column x=10 by 1
rotate column x=7 by 1
rotate column x=6 by 1
rotate column x=5 by 1
rotate column x=3 by 2
rotate column x=2 by 1
rotate column x=1 by 1
rotate column x=0 by 1
rect 49x1
rotate row y=2 by 34
rotate column x=44 by 1
rotate column x=40 by 2
rotate column x=39 by 1
rotate column x=35 by 4
rotate column x=34 by 1
rotate column x=30 by 4
rotate column x=29 by 1
rotate column x=24 by 1
rotate column x=15 by 4
rotate column x=14 by 1
rotate column x=13 by 3
rotate column x=10 by 4
rotate column x=9 by 1
rotate column x=5 by 4
rotate column x=4 by 3
rotate row y=5 by 20
rotate row y=4 by 20
rotate row y=3 by 48
rotate row y=2 by 20
rotate row y=1 by 41
rotate column x=47 by 5
rotate column x=46 by 5
rotate column x=45 by 4
rotate column x=43 by 5
rotate column x=41 by 5
rotate column x=33 by 1
rotate column x=32 by 3
rotate column x=23 by 5
rotate column x=22 by 1
rotate column x=21 by 2
rotate column x=18 by 2
rotate column x=17 by 3
rotate column x=16 by 2
rotate column x=13 by 5
rotate column x=12 by 5
rotate column x=11 by 5
rotate column x=3 by 5
rotate column x=2 by 5
rotate column x=1 by 5</pre>
</body>
</html>