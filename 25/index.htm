<script>

function check(s) {
	if (s.length == 0) { return true; }
	for (var i = 0; i < s.length; i++) {
		if (s[i] !== "" + (i % 2)) {
			return false;
		}
	}
	return true;
}

function run(instructions, a) {
	var cpu = { ip: 0, a: a, b: 0, c: 1, d: 0 },
		output = "",
		reg = x => "abcd".split("").indexOf(x) > -1,
		val = x => parseInt(reg(x) ? cpu[x] : x),
		instructionSet = {
			"cpy": function(x, y) {
				if (!reg(y)) { return; }
				cpu[y] = val(x);
				cpu.ip++;
			},
			"inc": function(x) {
				if (!reg(x)) { return; }
				cpu[x]++;
				cpu.ip++;
			},
			"dec": function(x) {
				if (!reg(x)) { return; }
				cpu[x]--;
				cpu.ip++;
			},
			"jnz": function(x, y) {
				x = val(x);
				y = val(y);
				if (x != 0) {
					cpu.ip += y;
				} else {
					cpu.ip++;
				}
			},
			"out": function(x) {
				output += val(x);
				cpu.ip++;
			}
		};
	var max = 1000000,
		result = false;
	while (cpu.ip >= 0 && cpu.ip < instructions.length) {
		if (!(result = check(output))) {
			console.log("%s %i: %s", result ? "T" : "F", a, output);
			return false;
		}
		if (max-- <= 0) { break; }
		/*console.log(
			"%i: %s (%s) A %i, B: %i, C: %i, D: %i",
			cpu.ip,
			instructions[cpu.ip].instruction,
			instructions[cpu.ip].operands.join(" "),
			cpu.a, cpu.b, cpu.c, cpu.d
		);*/
		instructionSet[instructions[cpu.ip].instruction].apply(null, instructions[cpu.ip].operands);
	}
	console.log("%s %i: %s", check(output) ? "T" : "F", a, output);
	return true;
}

function tokenize(s) {
	var parts = s.split(/[\s,]+/);
	return { instruction: parts.shift(), operands: parts };
}

window.addEventListener("load", function() {
	var instructions = input.map(tokenize),
		a = 0;
	
	// Unique outputs occur on arithmetic sequence:
	// a_n = a_1 + (n - 1) * d with a_1 = 4, d = 16
	for (var i = 0; i < 100; i++) {
		a = 4 + (i - 1) * 16;
		if (run(instructions, 4 + (i - 1) * 16)) {
			console.log("Found %i", a);
			break;
		}
	}
}, false);

var input = [
	"cpy a d",
	"cpy 15 c",
	"cpy 170 b",
	"inc d",
	"dec b",
	"jnz b -2",
	"dec c",
	"jnz c -5",
	"cpy d a",
	"jnz 0 0",
	"cpy a b",
	"cpy 0 a",
	"cpy 2 c",
	"jnz b 2",
	"jnz 1 6",
	"dec b",
	"dec c",
	"jnz c -4",
	"inc a",
	"jnz 1 -7",
	"cpy 2 b",
	"jnz c 2",
	"jnz 1 4",
	"dec b",
	"dec c",
	"jnz 1 -4",
	"jnz 0 0",
	"out b",
	"jnz a -19",
	"jnz 1 -21"
];

</script>